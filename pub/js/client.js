// Generated by CoffeeScript 1.6.2
(function() {
  var Appsocket, buildChecksum, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Appsocket = (function() {
    var deleteCallback, drawCallback, renameUser, socket, userJoinCallback;

    socket = null;

    drawCallback = deleteCallback = userJoinCallback = null;

    function Appsocket(host, draw, del, userJoin) {
      console.log("connecting to socket server " + host);
      socket = io.connect(host);
      drawCallback = draw;
      deleteCallback = del;
      userJoinCallback = userJoin;
      socket.on('connect', function() {
        console.log('connected to server');
        return socket.emit('join', prompt("tell me your name"));
      });
      socket.on('receiveDrawing', function(userID, drawObject) {
        console.log('got draw update from #{userID} with data #{data}');
        drawObject.md5 = buildChecksum(drawObject);
        console.log('checksum is #{drawobject.md5}');
        return drawCallback(drawObject);
      });
      socket.on('deleteDrawing', function(md5) {
        console.log('got delete drawing notification for #{md5}');
        return deleteCallback(md5);
      });
      socket.on('newUser', function(username, userID) {
        return console.log('some user logged in named #{username}');
      });
      socket.on('userDisconnect', function(userID) {
        return console.log('user #{userID} disconnected');
      });
    }

    Appsocket.sendDrawing = function(drawObject) {
      console.log('send draw update');
      socket.emit('drawUpdate', drawObject);
      return buildChecksum(drawObject);
    };

    Appsocket.deleteDrawing = function(md5) {
      console.log('send delete drawing');
      return socket.emit('deleteDrawing', md5);
    };

    renameUser = function(newName) {
      console.log('rename myself');
      return socket.emit('renameUser', newName);
    };

    return Appsocket;

  })();

  if (!root.socketFactory) {
    root.socketFactory = function(host) {
      return new Appsocket(host);
    };
  }

  buildChecksum = function(drawObject) {
    var coordinate, crypto, serializedObject, _i, _len, _ref;

    crypto = require('crypto');
    serializedObject = "" + color + "." + thicknes;
    _ref = drawObject.points;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      coordinate = _ref[_i];
      serializedObject += "." + coordinate.x + "." + coordinate.y;
    }
    return crypto.createHash('md5').update(serializedObject).digest("hex");
  };

}).call(this);
